%!PS-Adobe-3.0
%%Title: isingw.cpp
%%For: Jacques Kotze
%%Creator: a2ps version 4.12
%%CreationDate: Mon Jun 11 15:29:38 2001
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%Pages: 1
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 842 def
/sw 595 def
/llx 24 def
/urx 571 def
/ury 818 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 5.477068 def
/cw 3.286241 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   765.146392 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.300369 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <iostream.h>) p n
(#include) K
( <math.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <fstream.h>) p n
() N
() N
() N
(//random number generator from "Numerical Recipes in C" \(Ran1.c\)) c n
(#include) K
( <") p
(random.h) str
(">) p n
() N
() N
() N
(//file to output data into) c n
(ofstream DATA\(") p
(DATA.1.dat) str
(",ios::out\);) p n
() N
() N
() N
(//structure for a 2d lattice with coordinates x and y) c n
(struct) k
( lat_type) p n
({) N
(  ) S
(int) k
( x;) p n
(  ) S
(int) k
( y;) p n
(};) N
(const) K
( ) p
(int) k
( size=2;) p 24 T () S 32 T () S 40 T () S
(//lattice size) c n
(const) K
( ) p
(int) k
( lsize=size-1;) p 24 T () S 32 T () S 40 T () S
(//array size for lattice) c n
(const) K
( ) p
(int) k
( n=size*size;) p 24 T () S 32 T () S 40 T () S
(//number of spin points on lattice      ) c n
(float) k
( T=5.0;) p 16 T () S 24 T () S 32 T () S 40 T () S
(//starting point for temperature) c n
(const) K
( ) p
(float) k
( minT=0.5;) p 24 T () S 32 T () S 40 T () S
(//minimum temperature) c n
(float) k
( change=0.1;) p 24 T () S 32 T () S 40 T () S
(//size of steps for temperature loop) c n
(int) k
( lat[size+1][size+1];) p 32 T () S 40 T () S
(//2d lattice for spins) c n
(long) k
( ) p
(unsigned) k
( ) p
(int) k
( mcs=10000;) p 32 T () S 40 T () S
(//number of Monte Carlo steps) c 72 T () N
(int) k
( transient=1000;) p 24 T () S 32 T () S 40 T () S
(//number of transient steps ) c n
(double) k
( norm=\(1.0/) p
(float) k
(\(mcs*n\)\);) p 32 T () S 40 T () S
(//normalization for averaging) c n
(long) k
( ) p
(int) k
( seed=436675;) p 24 T () S 32 T (   ) S 40 T () S
(//seed for random number generator      ) c n
() p n
() N
() N
(//function for random initialization of lattice) c n
(initialize\() p
(int) k
( lat[size+1][size+1]\)) p n
({) N
(    ) S
(for) K
(\() p
(int) k
( y=size;y>=1;y--\)) p n
(    {) N
() S 8 T () S
(for) K
(\() p
(int) k
( x=1;x<=size;x++\)) p n
() S 8 T ({) N
() S 8 T () N
() S 8 T (    ) S
(if) K
(\(ran1\(&seed\)>=0.5\)) p n
() S 8 T () S 16 T (lat[x][y]=1;) N
() S 8 T (    ) S
(else) K n
() p 8 T () S 16 T (lat[x][y]=-1;) N
() S 8 T (}) N
(    }) N
(}) N
() N
() N
() N
(//output of lattice configuration to the screen) c n
(output\() p
(int) k
( lat[size+1][size+1]\)) p n
({) N
(  ) S
(for) K
(\() p
(int) k
( y=size;y>=1;y--\)) p n
(    {) N
(      ) S
(for) K
(\() p
(int) k
( x=1;x<=size;x++\)) p n
() S 8 T ({) N
() S 8 T (  ) S
(if) K
(\(lat[x][y]<0\)) p n
() S 8 T (    cout<<") S
( - ) str
(";) p n
() S 8 T (  ) S
(else) K n
() p 8 T (    cout<<") S
( + ) str
(";) p n
() S 8 T (}) N
(      cout<<endl;) N
(    }) N
(}) N
() N
() N
() N
(//function for choosing random position on lattice) c n
(choose_random_pos_lat\(lat_type &pos\)) p n
({) N
(  pos.x=\() S
(int) k
(\)ceil\(ran1\(&seed\)*\(size\)\);) p n
(  pos.y=\() S
(int) k
(\)ceil\(ran1\(&seed\)*\(size\)\);) p n
(  ) S
(if) K
(\(pos.x>size||pos.y>size\)) p n
(    {) N
(      cout<<") S
(error in array size allocation for random position on lattice!) str
(";) p n
(      exit;) N
(    }) N
(}) N
() N
() N
() N
(//function for calculating energy at a particular position on lattice) c n
(int) k
( energy_pos\(lat_type &pos\)) p n
({) N
() N
(    ) S
(//periodic boundary conditions) c n
(    ) p
(int) k
( up,down,left,right,e;) p n
(    ) S
(if) K
(\(pos.y==size\)) p n
() S 8 T (up=1;) N
(    ) S
(else) K n
() p 8 T (up=pos.y+1;) N
(    ) S
(if) K
(\(pos.y==1\)) p n
() S 8 T (down=size;) N
(    ) S
(else) K n
() p 8 T (down=pos.y-1;) N
(    ) S
(if) K
(\(pos.x==1\)) p n
() S 8 T (left=size;) N
(    ) S
(else) K n
() p 8 T (left=pos.x-1;) N
(    ) S
(if) K
(\(pos.x==size\)) p n
() S 8 T (right=1;) N
(    ) S
(else) K n
() p 8 T (right=pos.x+1;) N
() N
(    ) S
(//energy for specific position) c n
(    e=-1*lat[pos.x][pos.y]) p n
() S 8 T (*\(lat[left][pos.y]+lat[right][pos.y]+lat[pos.x][up]+lat[pos.x][down]\);) N
(    ) S
(return) K
( e;) p n
(}) N
() N
() N
() N
(//function for testing the validity of flipping a spin at a selected position) c n
(bool) k
( test_flip\(lat_type pos, ) p
(int) k
( &de\)) p n
({) N
(    de=-2*energy_pos\(pos\);) S 32 T () S 40 T () S
(//change in energy for specific spin) c n
(    ) p
(if) K
(\(de<0\)) p n
() S 8 T () S
(return) K
( ) p
(true) k
(;) p 24 T () S 32 T () S 40 T () S
(//flip due to lower energy) c n
(    ) p
(else) K
( ) p
(if) K
(\(ran1\(&seed\)<exp\(-de/T\)\)) p n
() S 8 T () S
(return) K
( ) p
(true) k
(;) p 24 T () S 32 T () S 40 T () S
(//flip due to heat bath) c n
(    ) p
(else) K
( ) p n
() S 8 T () S
(return) K
( ) p
(false) k
(;) p 24 T () S 32 T () S 40 T () S
(//no flip) c n
(}) p n
() N
() N
() N
(//flip spin at given position ) c n
(flip\(lat_type pos\)) p n
({) N
(  lat[pos.x][pos.y]=-lat[pos.x][pos.y];) N
(}) N
() N
() N
(Monte Carlo Simulation of a 2D Ising Model) (Page 1/2) () title
border
/v 1 store
/x0 x v get 2.300369 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(//function for disregarding transient results) c n
(transient_results\(\)) p n
({) N
(    lat_type pos;) N
(    ) S
(int) k
( de=0;) p n
(    ) S
(for) K
(\() p
(int) k
( a=1;a<=transient;a++\)) p n
(    {) N
() S 8 T () S
(for) K
(\() p
(int) k
( b=1;b<=n;b++\)) p n
() S 8 T ({) N
() S 8 T (    choose_random_pos_lat\(pos\);) N
() S 8 T (    ) S
(if) K
(\(test_flip\(pos,de\)\)) p n
() S 8 T (    {) N
() S 8 T () S 16 T (flip\(pos\);) N
() S 8 T (    }) N
() S 8 T (}) N
(    }) N
(}) N
() N
() N
() N
(//function for calculating total magnetization of lattice) c n
(int) k
( total_magnetization\(\)) p n
({) N
(  ) S
(int) k
( m=0;) p n
(  ) S
(for) K
(\() p
(int) k
( y=size;y>=1;y--\)) p n
(    {) N
(      ) S
(for) K
(\() p
(int) k
( x=1;x<=size;x++\)) p n
() S 8 T ({) N
() S 8 T (  m+=lat[x][y];  ) N
() S 8 T (}) N
(    }) N
(  ) S
(return) K
( m;) p n
(}  ) N
() N
() N
() N
(//function for calculating total energy of lattice) c n
(int) k
( total_energy\(\)) p n
({) N
(  lat_type pos;) N
(  ) S
(int) k
( e=0;) p n
(  ) S
(for) K
(\() p
(int) k
( y=size;y>=1;y--\)) p n
(    {) N
(      pos.y=y;) N
(      ) S
(for) K
(\() p
(int) k
( x=1;x<=size;x++\)) p n
() S 8 T ({) N
() S 8 T (  pos.x=x;) N
() S 8 T (  e+=energy_pos\(pos\);) N
() S 8 T (}) N
(    }) N
(  ) S
(return) K
( e;) p n
(}) N
() N
() N
() S 8 T () N
(//main program) c n
(void) k
( main\(\)) p n
({) N
() N
(    ) S
(//declaring variables to be used in calculating the observables) c n
(    ) p
(double) k
( E=0,Esq=0,Esq_avg=0,E_avg=0,etot=0,etotsq=0;) p n
(    ) S
(double) k
( M=0,Msq=0,Msq_avg=0,M_avg=0,mtot=0,mtotsq=0;) p n
(    ) S
(double) k
( Mabs=0,Mabs_avg=0,Mq_avg=0,mabstot=0,mqtot=0;) p n
(    ) S
(int) k
( de=0;) p n
(    lat_type pos;) N
(    ) N
(    ) S
(//initialize lattice to random configuration) c n
(    initialize\(lat\);) p n
(    ) N
(    ) S
(//Temperature loop) c n
(    ) p
(for) K
(\(;T>=minT;T=T-change\)) p n
(    {) N
() N
() S 8 T () S
(//transient function ) c n
() p 8 T (transient_results\(\);) N
() S 8 T () N
() S 8 T () S
(//observables adopt equilibrated lattice configurations values ) c n
() p 8 T (M=total_magnetization\(\);) N
() S 8 T (Mabs=abs\(total_magnetization\(\)\);) N
() S 8 T (E=total_energy\(\);) N
() S 8 T () N
() S 8 T () S
(//initialize summation variables at each temperature step) c n
() p 8 T (etot=0;) N
() S 8 T (etotsq=0;) N
() S 8 T (mtot=0;) N
() S 8 T (mtotsq=0;) N
() S 8 T (mabstot=0;) N
() S 8 T (mqtot=0;) N
(        ) N
(        ) S
(//Monte Carlo loop) c n
(       ) p 8 T () S
(for) K
(\() p
(int) k
( a=1;a<=mcs;a++\)) p n
() S 8 T ({) N
() N
(            ) S
(//Metropolis loop) c n
() p 8 T (    ) S
(for) K
(\() p
(int) k
( b=1;b<=n;b++\)) p n
() S 8 T (    {) N
() S 8 T () S 16 T (choose_random_pos_lat\(pos\);) N
() S 8 T () S 16 T () S
(if) K
(\(test_flip\(pos,de\)\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T (    flip\(pos\);) N
(                    ) N
(                    ) S
(//adjust observables) c n
() p 8 T () S 16 T (    E+=2*de;) N
() S 8 T () S 16 T (    M+=2*lat[pos.x][pos.y];) N
() S 8 T () S 16 T (    Mabs+=abs\(lat[pos.x][pos.y]\);) N
() S 8 T () S 16 T (}) N
() S 8 T (    }) N
(           ) N
() S 8 T (    ) S
(//keep summation of observables) c n
() p 8 T (    etot+=E/2.0;) S
(//so as not to count the energy for each spin twice) c n
() p 8 T (    etotsq+=E/2.0*E/2.0;) N
() S 8 T (    mtot+=M;) N
() S 8 T (    mtotsq+=M*M;) N
() S 8 T (    mqtot+=M*M*M*M;) N
() S 8 T (    mabstot+=\(sqrt\(M*M\)\);) N
() S 8 T (}) S 16 T () N
(     ) N
() S 8 T () S
(//average observables) c n
() p 8 T (E_avg=etot*norm;) N
() S 8 T (Esq_avg=etotsq*norm;) N
() S 8 T (M_avg=mtot*norm;) N
() S 8 T (Msq_avg=mtotsq*norm;) N
() S 8 T (Mabs_avg=mabstot*norm; ) N
() S 8 T (Mq_avg=mqtot*norm;) N
() S 8 T () N
(        ) S
(//output data to file ) c n
() p 8 T (DATA<<T<<) S 24 T () S 32 T (  ) S 40 T () S 48 T (   ) S
(//temperature ) c n
(       ") p
(\\t) str
("<<M_avg<<") p
(\\t) str
("<<Mabs_avg<<") p
(\\t) str
("<<Msq_avg<<   ) p
(//<M>;<|M|>;<M^2> per spin) c n
(       ") p
(\\t) str
("<<\(Msq_avg-\(M_avg*M_avg*n\)\)/\(T\)<<) p 48 T (   ) S
(//susceptibility per spin \(X\)) c n
(       ") p
(\\t) str
("<<\(Msq_avg-\(Mabs_avg*Mabs_avg*n\)\)/\(T\)<<) p
(//susceptibility per spin \(X'\)) c n
(       ") p
(\\t) str
("<<E_avg<<") p
(\\t) str
("<<Esq_avg<<) p 40 T () S 48 T (   ) S
(//<E>;<E^2> per spin) c n
(       ") p
(\\t) str
("<<\(Esq_avg-\(E_avg*E_avg*n\)\)/\(T*T\)<<) p 48 T (   ) S
(//heat capacity \(C\) per spin) c n
(       ") p
(\\t) str
("<<1-\(\(Mq_avg\)/\(3*Msq_avg\)\)<<endl;  ) p 48 T (   ) S
(//cumulant \(U_L\)) c n
() p 8 T (    ) N
(    }) N
(} ) N
() N
(Monte Carlo Simulation of a 2D Ising Model) (Page 2/2) () title
border
grestore
(Copyright General Public License) () () footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
